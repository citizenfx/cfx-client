$fonts: 'Segoe UI', 'Roboto';

$width: 100vw;
$height: 100vh;

$fontSize: 2vh;
$padding: 1vh;
$multiplier: 1.6813; 

$appNavHeight: 5vh;
$appContentPadding: $padding*2;
$appContentMargin: $appNavHeight;
$appContentHeight: calc(#{$height} - #{$appNavHeight} - #{$appContentMargin});
$appContentWidth: calc(#{$width} - #{$appContentPadding});

$appServersItemHeight: 3.0vh;
$appServersHeaderHeight: $appServersItemHeight;

$filterHeight: 5.5vh;

$colorsLight: (
    bgColour: #93a1a1,
    fgColour: rgb(40, 40, 40),
    secondaryColour: rgb(60, 60, 60),
    greenyColour: rgb(155, 248, 94),
    yellowColour: hsl(53, 100%, 50%),
    redColour: hsl(19, 100%, 40%),
    blueColour: hsl(180, 100%, 40%),
    textColour: rgb(40, 40, 40),
    acrylicBlur: url(#acrylicBlur),
    backgroundImage: url(../assets/images/bg.jpg)
);

$colorsDark: (
    bgColour: rgb(40, 40, 40),
    fgColour: rgb(255, 255, 255),
    secondaryColour: rgb(240, 240, 240),
    greenyColour: rgb(155, 248, 94),
    yellowColour: hsl(53, 100%, 50%),
    redColour: hsl(19, 100%, 40%),
    blueColour: hsl(180, 100%, 40%),
    textColour: rgb(240, 240, 240),
    acrylicBlur: url(#acrylicBlurDark),
    backgroundImage: url(../assets/images/bg-night.jpg)
);

$themeLight: (
    name: light,
    data: $colorsLight
);

$themeDark: (
    name: dark,
    data: $colorsDark
);

$themes: $themeLight $themeDark;

@function gtv($theme, $name) {
    @return map-get(
        map-get($theme, data),
        $name
    );
}

@mixin theme() {
    @each $theme in $themes {
        :host-context(.theme-#{map-get($theme, name)}) & {
            @content ($theme);
        }
    }
}

@mixin themeHostWorkaround() {
    @each $theme in $themes {
        :host-context(.theme-#{map-get($theme, name)}) {
            @content ($theme);
        }
    }
}

@mixin themeNoHost() {
    @each $theme in $themes {
        .theme-#{map-get($theme, name)} & {
            @content ($theme);
        }
    }
}

@mixin themeIsHost() {
    @each $theme in $themes {
        &.theme-#{map-get($theme, name)} {
            @content ($theme);
        }
    }
}

@mixin fullWidthPadded($extraPadding: $padding*4) {
    width: calc(#{$width} - #{$extraPadding});
}

@mixin backdropBlur($amount: 5px) {
    backdrop-filter: blur($amount);
}

@mixin appContent() {
    height: $appContentHeight;
	margin-top: $appContentMargin;
    padding-left: calc(#{$appContentPadding} + 4vw);
    padding-right: calc(#{$appContentPadding} + 4vw);
    margin-left: -4vw;
    margin-right: -4vw;
    padding-top: $padding*2;

    position: relative;
    
    box-shadow: rgba(30, 30, 30, .2) 0vw -0.4vh 2.5vh;

    overflow: hidden;
    
    &:after {
        content: '';
        width: 100%;
        height: 100%;
        top: 0px;
        left: 0px;

        position: absolute;
        z-index: -999;

        transform: scale(1.1);
    }

    @include themeHostWorkaround() using ($theme) {
        &:after {
            backdrop-filter: gtv($theme, acrylicBlur);
        }
    };
}
